"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[647],{73651:e=>{e.exports=JSON.parse('{"functions":[{"name":"test","desc":"Creates a new test inside of the current scope.\\n\\n\\n```lua\\ntest(\\"1 == 1\\", function()\\n\\tassert(1 == 1)\\nend)\\n```","params":[{"name":"name","desc":"","lua_type":"string"},{"name":"callback","desc":"","lua_type":"(context: {}) -> ()"}],"returns":[],"function_type":"static","source":{"line":18,"path":"src/x/init.lua"}},{"name":"testFOCUS","desc":"Creates a new test inside of the current scope. If any test is focused, only focused tests will run.\\n\\n\\n```lua\\ntestFOCUS(\\"1 == 1\\", function()\\n\\tassert(1 == 1)\\nend)\\n```","params":[{"name":"name","desc":"","lua_type":"string"},{"name":"callback","desc":"","lua_type":"(context: {}) -> ()"}],"returns":[],"function_type":"static","source":{"line":34,"path":"src/x/init.lua"}},{"name":"testSKIP","desc":"Creates a new test inside of the current scope that will be skipped.\\n\\n\\n```lua\\ntestSKIP(\\"skip\\", function()\\n\\tprint(\\"this will not print\\")\\nend)\\n```","params":[{"name":"name","desc":"","lua_type":"string"},{"name":"callback","desc":"","lua_type":"(context: {}) -> ()"}],"returns":[],"function_type":"static","source":{"line":50,"path":"src/x/init.lua"}},{"name":"beforeEach","desc":"Runs `callback` before each test inside its scope runs. It\'s passed a `context` table unique to that test.\\n`context` can be used to share setup code across tests.\\n\\n\\n```lua\\nbeforeEach(function(context)\\n\\tcontext.maid = Maid.new()\\nend)\\n\\ntest(function(context)\\n\\tassert(context.maid:isEmpty())\\nend)\\n```","params":[{"name":"callback","desc":"","lua_type":"(context: {}) -> ()"}],"returns":[],"function_type":"static","source":{"line":70,"path":"src/x/init.lua"}},{"name":"afterEach","desc":"Runs `callback` after each test inside its scope runs. It\'s passed a `context` table which can be used to cleanup\\nstate unique to the test.\\n\\n\\n```lua\\nafterEach(function(context)\\n\\tcontext.object:destroy()\\nend)\\n```","params":[{"name":"callback","desc":"","lua_type":"(context: {}) -> ()"}],"returns":[],"function_type":"static","source":{"line":86,"path":"src/x/init.lua"}},{"name":"nested","desc":"Creates a nested scope for tests. It can be used to group tests that are testing similar things.\\n\\n\\n```lua\\nnested(\\"nested\\", function()\\n\\t-- This `beforeEach` will only affect tests inside of this nested scope.\\n\\tbeforeEach(function() end)\\n\\n\\ttest(\\"nested test\\", function() end)\\nend)\\n```","params":[{"name":"name","desc":"","lua_type":"string"},{"name":"callback","desc":"","lua_type":"() -> ()"}],"returns":[],"function_type":"static","source":{"line":105,"path":"src/x/init.lua"}},{"name":"shouldThrow","desc":"Throws if the callback doesn\'t error or if the error does not contain `substring`.\\n\\n```lua\\n-- This will not throw because the callback errors with a string containing \\"needle\\"\\nshouldThrow(function()\\n\\terror(\\"haystick with a needle\\")\\nend, \\"needle\\")\\n```","params":[{"name":"callback","desc":"","lua_type":"() -> ()"},{"name":"substring","desc":"","lua_type":"string?"}],"returns":[],"function_type":"static","source":{"line":16,"path":"src/x/shouldThrow.lua"}}],"properties":[],"types":[],"name":"x","desc":"This class is passed into test modules.","source":{"line":111,"path":"src/x/init.lua"}}')}}]);